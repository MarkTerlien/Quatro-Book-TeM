[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Template",
    "section": "",
    "text": "Dit template is ontwikkeld door AGIS.\nPas het template aan naar je eigen wensen.\nBeschrijf op deze pagina waar de les over gaat en wat de benodigde voorkennis is."
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "See Knuth (1984) for additional discussion of literate programming.\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "Introductie_Python.html",
    "href": "Introductie_Python.html",
    "title": "3  Introductie Python",
    "section": "",
    "text": "Python is een populaire programmeertaal die bedacht is door Guido van Rossum in 1991.\nPython kan gebruikt worden voor: - Maken van web applicaties - Automatiseren van data verwerking - Verbinden met databases en het lezen en schrijven van (GIS-)bestanden - Data analyse en machine learning\nPython heeft een aantal voordelen: - Python werkt op verschillende platformen (Windows, Mac en Linux) - Python heeft een eenvoudige syntax - Python is erg geschikt voor protoyping - In Python is het mogelijk om zowel procedureel als object geörienteerd te werken - Er zijn veel bibliotheken beschikbaar om de functionaliteit uit te breiden\nEen uitgebreide introductie over programmeren in Python vind je hier.\nEen eenvoudige Python tutorial met voorbeelden vind je hier.  \n\n\nOm de functionaliteit van Python uit te breiden kun je libraries installeren. Veelgebruikte libraries voor data verwerking van geografische gegevens zijn gdal en numpy. Je kunt deze libraries importeren met de functie import. Libraries worden ook wel modules genoemd.\n\nimport math\n\nprint(type(math))\nprint(dir(math))\n\n<class 'module'>\n['__doc__', '__loader__', '__name__', '__package__', '__spec__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'gcd', 'hypot', 'inf', 'isclose', 'isfinite', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'log2', 'modf', 'nan', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'tau', 'trunc']\n\n\n\n\n\nEen goede programmeur voorziet zijn code van commentaar. Commentaar geeft toelichting op de code zodat deze ook van andere programmeurs te begrijpen is. In Python moet een commentaarregel voorafgegaan worden door een #.\n\nprint('Deze regel wordt geprint omdat dit geen commentaarregel is')\n# print('Deze regel wordt niet geprint omdat dit een commentaarregel is')\n\nDeze regel wordt geprint omdat dit geen commentaarregel is"
  },
  {
    "objectID": "Introductie_Python.html#werken-met-strings",
    "href": "Introductie_Python.html#werken-met-strings",
    "title": "3  Introductie Python",
    "section": "5.1 Werken met strings",
    "text": "5.1 Werken met strings\nEen string staat altijd tussen enkele quotes of dubbele quotes. Het toekennen van een string aan een variabele gebeurt met het = teken.\n\nx = 'Hello world'\nprint(x)\n\nmet het + teken kan je twee strings aan elkaar koppelen\n\nx = 'Hello '\ny = 'world'\nz = x + y + y\nprint(z)\n\nEen string kan beschouwd worden als een lijst van karakters waardoor je eenvoudig karakters uit een string kan halen.\nLet op: Programmeurs beginnen bij 0 te tellen!\n\nx = 'Hello world'\nprint(x[2])\n\nHet is ook mogelijk om een range van karakters te selecteren. In het volgende voorbeeld worden de eerste vijf karakters geselecteerd.\n\nx = 'Hello world'\nprint(x[0:5])\n\nIn het volgende voorbeeld worden alle karakters vanaf het zevende karakter geselecteerd.\n\nx = 'Hello world'\nprint(x[6:])\n\nIn het volgende voorbeeld worden de laatste vijf karakters geselecteerd.\n\nx = 'Hello world'\nprint(x[-5:])\n\nHet is ook mogelijk om strings te vervangen. In het volgende voorbeeld wordt de string “world” vervangen door “wereld”.\n\nx = 'Hello world'\ny = x.replace('world','wereld')\nprint(y)"
  },
  {
    "objectID": "Introductie_Python.html#werken-met-nummers",
    "href": "Introductie_Python.html#werken-met-nummers",
    "title": "3  Introductie Python",
    "section": "5.2 Werken met nummers",
    "text": "5.2 Werken met nummers\nEen nummer staat nooit tussen enkele quotes of dubbele quotes. Het toekennen van een nummer aan een variabele gebeurt met het = teken. Als je een geheel getal toekent aan een variabele wordt het data type een int. Als je een decimaal getal toekent aan een variabele wordt het data type een float. Als je een geheel getal als float wilt definiëren, dan moet je het getal met een punt toekennen aan een variabele.\n\nx = 5\nprint(type(x))\n\n\ny = 5.5\nprint(type(y))\n\n\nz = 5.\nprint(type(z))\n\nIn berekeningen is het mogelijk om zowel integers en floats te gebruiken.\n\nx = 5\ny = 5.5\nz = x + y\nprint(z)\nprint(type(z))\n\nDe library math beidt een groot aantal mathematische functies, bijvoorbeeld voor worteltrekken. Hiervoor gebruik je de functie sqrt.\n\nimport math\n\nx = '5'\nprint(type(x))\ny = math.sqrt(x)\nprint(y)\nprint(type(y))\n\nMeer informatie over de math library kan hier gevonden worden."
  },
  {
    "objectID": "Introductie_Python.html#werken-met-booleans",
    "href": "Introductie_Python.html#werken-met-booleans",
    "title": "3  Introductie Python",
    "section": "5.3 Werken met booleans",
    "text": "5.3 Werken met booleans\nEen boolean variabele kan de waarde true of false hebben. Als je een vergelijking evalueert is de uitkomst of trueof false.\nLet op: Als je checkt of twee waardes hetzelfde zijn gebruik je ==. Om een waarde aan een variabele toe te kennen, gebruik je =.\n\nprint(5 > 4)\nprint(5 == 5)\nprint(5 == 4)\nprint(5 < 4)"
  },
  {
    "objectID": "Introductie_Python.html#werken-met-datum-en-tijd",
    "href": "Introductie_Python.html#werken-met-datum-en-tijd",
    "title": "3  Introductie Python",
    "section": "5.4 Werken met datum en tijd",
    "text": "5.4 Werken met datum en tijd\nDatum en tijd zijn geen data types maar het is wel mogelijk om met datum en tijd te werken door gebruik te maken van de library datetime. Deze library moet geïmporteerd worden om met datum en tijd te kunnen werken. Met het commando dir krijg je een overzicht van alle functies in de library.\n\nimport datetime\n\nprint(type(datetime))\nprint(dir(datetime))\n\nDe huidige datum kan als volgt opgevraagd worden:\n\nimport datetime\n\nx = datetime.datetime.now()\nprint(x)\n\nHet is ook mogelijk om zelf een datum en tijd te definiëren en met datums en tijd te rekenen om het verschil tussen twee tijdstippen uit te rekenen.\n\nimport datetime\n\nx = datetime.datetime(2019, 5, 17, 15, 45, 00)\nprint(x)\n\ny = datetime.datetime(2020, 5, 17, 12, 50, 21)\nprint(y)\n\n# Bereken het tijdsverschil tussen x en y in dagen, uren, minuten en seconden\nz = y - x\nprint(z) \n\n# Print tijdsverschil in seconden\nprint(z.seconds)\n\nMeer informatie over de datetime library kan hier gevonden worden."
  },
  {
    "objectID": "Introductie_Python.html#werken-met-lijsten",
    "href": "Introductie_Python.html#werken-met-lijsten",
    "title": "3  Introductie Python",
    "section": "5.5 Werken met lijsten",
    "text": "5.5 Werken met lijsten\nEen list is een geordende verzameling van data elementen (bijvoorbeeld integers, floats of strings). De elementen in een lijst zijn geordend wat betekent dat ieder element op basis van een index (positie in de lijst) uit de lijst opgehaald kan worden.\nJe maakt een nieuwe lege lijst met blokhaken. Met de functie append kan je elementen aan een lijst toevoegen.\n\nmy_list = []\nmy_list.append(1)\nmy_list.append(2)\nmy_list.append(3)\nprint(my_list)\n\nHet is ook mogelijk om een lijst met elementen te creeëren.\n\nmy_list = [1, 2, 3]\nmy_list.append(1)\nmy_list.append(2)\nmy_list.append(3)\nprint(len(my_list))\n\nJe kan op basis van positie in de lijst (index) een element uit de lijst ophalen.\nLet op: Programmeurs beginnen bij 0 te tellen!\n\nmy_list = [1, 2, 3]\nprint(my_list[1])\n\nHet is ook mogelijk om alle elementen uit een lijst op te halen via een for lus. De for lus wordt in het volgende hoofdstuk in detail behandeld.\n\nmy_list = [1, 2, 3, 4]\nfor element in my_list :\n    print(element)\n\nHet aantal elementen in een lijst is als volgt te bepalen.\n\nmy_list = [1, 2, 3, 4]\nprint(len(my_list))"
  },
  {
    "objectID": "Introductie_Python.html#het-if-statement",
    "href": "Introductie_Python.html#het-if-statement",
    "title": "3  Introductie Python",
    "section": "6.1 Het if statement",
    "text": "6.1 Het if statement\nHet if statement wordt gebruikt om beslissingen te nemen met betrekking tot het wel of niet doorlopen van een uitvoeringsblok. Het if statement evalueert een boolean expressie. Deze boolean expressie levert of True of False. Bij True wordt een blok met instructies wel uitgevoerd en bij False wordt een blok met instructie niet uitgevoerd. Het is mogelijk om het if statement uit te breiden met elif en/of else om aan te geven wat er gedaan moet worden als een boolean expressie een False oplevert.\n\nx = 3\nif x > 4 :\n    print('x groter dan 4')\n\nif x == 4:\n    print('x is 4')\nif x < 4 :\n    print('x kleiner dan 4')\nprint('Ingesprongen')\n\n\nx = 4\nif x > 4 :\n    print('x groter dan 4')\nelif x == 4:\n    print('x is 4')\nelse :\n    print('x kleiner 4')\n\n\nx = 3\nif x > 4 :\n    print('x groter dan 4')\nelif x == 4:\n    print('x is 4')\nelse :\n    print('x kleiner dan 4')\n\nDe volgende condities kunnen geëvalueerd worden in een if statement: - a == b (gelijk) - a != b (niet gelijk) - a < b (kleiner) - a <= b (kleiner of gelijk) - a > b (groter) - a >= b (groter of gelijk)\nHet is mogelijk om verschillende of verschillende boolean expressies te combineren met de logische operatoren and en or.\n\nx = 4\ny = 4\nif x == 3 and y == 4:\n    print('Beide boolean expressies zijn waar')\n\n\nx = 3 \ny = 4\nif x == 4 or y == 4:\n    print('Een van beide of beide boolean expressies zijn beide waar')\n\n\nx = 5\nif x == 5 :\n    print('Deze regel wordt alleen geprint als x = 5')\nprint('Deze regel wordt altijd geprint')\n\n\nx = 4\nif x == 5 :\n    print('Deze regel wordt alleen geprint als x = 5')\nprint('Deze regel wordt altijd geprint')\n\nHet IF statement kan je ook gebruiken om te zoeken in strings\n\nx = 'Hello world'\nif 'world' in x:\n    print('world gevonden')\nif not 'wereld' in x:\n    print('wereld niet gevonden')"
  },
  {
    "objectID": "Introductie_Python.html#de-while-lus",
    "href": "Introductie_Python.html#de-while-lus",
    "title": "3  Introductie Python",
    "section": "6.2 De while lus",
    "text": "6.2 De while lus\nIn een while lus wordt een uitvoeringsblok uitgevoerd zolang er aan een conditie voldaan wordt. In het volgende voorbeeld wordt de while lus net zo lang doorlopen totdat de variabele teller de waarde 10 heeft. Elke keer dat de lus doorlopen wordt, wordt de teller met 1 opgehoogd.\nLet op: Binnen de while lus moeten twee commando’s uitgevoerd worden, het printen van de teller en het verhogen van de teller met 1. Deze commando’s vormen samen een uitvoeringsblok en moeten hetzelfde niveau van inspringen hebben.\n\nteller = 0\nwhile teller < 10 :\n    print(teller)\n    teller = teller + 1\nprint('Einde van while lus')"
  },
  {
    "objectID": "Introductie_Python.html#de-for-lus",
    "href": "Introductie_Python.html#de-for-lus",
    "title": "3  Introductie Python",
    "section": "6.3 De for lus",
    "text": "6.3 De for lus\nDe for lus is een tellergestuurde lus en bedoeld om een uitvoeringsblok een vooraf ingesteld aantal keren te doorlopen. De range() functie kan gebruikt worden om het aantal keren dat een uitvoeringsblok uitgevoerd moet worden aan te geven. De range() functie begint default bij 0 en eindigt bij de waarde die meegegeven wordt. Per aanroep wordt de waarde met 1 opgehoogd. Zolang de waarde kleiner is dan de opgegeven eindwaarde wordt de opgehoogd. Het is ook mogelijk een andere waarde dan 0 als startwaarde mee te geven.\n\nfor x in range(6) :\n    print(x)\nprint('Einde van for lus')\n\n\nfor x in range(4,6) :\n    print(x)\nprint('Einde van for lus')\n\nEen for lus kan ook gebruikt worden om de individuele elementen van een lijst te verwerken. Omdat een string een lijst van karakters is, is het mogelijk om de karakters van een string te printen in een for lus.\n\ns = 'Hello world'\nfor k in s :\n    print(k)\nprint('Einde van for lus')"
  },
  {
    "objectID": "Introductie_Python.html#functies-in-python",
    "href": "Introductie_Python.html#functies-in-python",
    "title": "3  Introductie Python",
    "section": "6.4 Functies in Python",
    "text": "6.4 Functies in Python\nEen functie is een codeblok dat alleen uitgevoerd wordt als het vanuit een andere codeblok aangeroepen wordt. Je schrijft een functie als je functionaliteit wilt het gebruiken in je programma of om je code overzichtelijk te houden.\nEen function begint met def gevolgd door de functie naam. Daarna volgen tussen haakjes de lijst van parameters die aan de functie meegegeven moetn worden. Met return wordt het resultaat van een functie teruggegeven. Het is niet verplicht dat een functie een resultaat teruggeeft.\nJe begint altijd met de definitie van de functie.\n\n# Functie definitie\ndef optellen(getal1, getal2) :\n    uitkomst = getal1 + getal2\n    return uitkomst\n\nDaarna kan je een functie één of meerdere keren aanroepen.\n\n# 1e keer functie aanroep\na = 3\nb = 6\nsom = optellen(a, b)\nprint(som)\n\n# 2e keer functie aanroep\na = 70\nb = 60\nsom = optellen(a, b)\nprint(som)\n\nEen voorbeeld van een functie die we kunnen hergebruiken, is de log functie uit de math module. Deze functie heeft als input het getal waarvan je het logaritme wilt uitrekenen en de basis van de logaritme.\nEr zijn ook functies, ook wel methoden genoemd, die behoren bij bepaalde objecten. In de vorige paragraaf hebben we het bijvoorbeeld gehad over het type object lijst. Een van de methoden die bij dit specifieke type object hoort is de methode append. We gebruiken de methode append om er een nummer toe te voegen aan de lijst. Deze methode doet dus specifiek iets met een lijst.\nWanneer heb je nu te maken met een functie, en wanneer met een methode? Dat is iets wat je zult moeten opzoeken, elke keer als je een functie/methode gebruikt. Lees de beschrijving/ handleiding van een functie, en bekijk voorbeelden van hoe een functie wordt gebruikt. In dit document zullen we als onderscheid de termen functies en methoden gebruiken. Waarbij dus geldt, een methode is een functie die iets verteld over, of iets doet met een specifiek type/klasse object."
  },
  {
    "objectID": "Introductie_Python.html#foutafhandeling-in-python",
    "href": "Introductie_Python.html#foutafhandeling-in-python",
    "title": "3  Introductie Python",
    "section": "6.5 Foutafhandeling in Python",
    "text": "6.5 Foutafhandeling in Python\nFouten die optreden omdat je code niet aan de syntax van Python voldoet, bijvoorbeeld omdat je niet bestaande reserved words gebruikt, worden syntax errors genoemd. Voordat een Python script uitgevoerd wordt, wordt gecheckt of de syntax correct is. Is dit niet het geval, dan krijg je een syntax error.\n\n# Script met syntax error\na wordt 5\nif a == 5:\nprint(\"a=5\")\n\nSoms treden er fouten op bij het uitvoeren van de code. Deze fouten worden runtime errors genoemd. Een voorbeeld van een runtime error is delen door nul of niet kunnen aanloggen op een database omdat de gebruiker een verkeerd wachtwoord opgegeven heeft. Een runtime error (fout tijdens uitvoeren van de code) genereert een exceptie.\n\na = 5\nb = 0\n\n# Deel a door b\nc = a/b\nprint(\"einde bewerking\")\n\nEen exceptie kan je opvangen zodat je runtime errors op een goede manier kan afhandelen, bijvoorbeeld door te tonen wat fout gaat en je programma niet abrupt stopt. Om je exceptie op te vangen en af te handelen gebruik je de try ... except constructie. Alle instructie kunnen in het try codeblok. De acties die uitgevoerd moeten worden als er een exceptie optreedt komen in het except codeblok.\n\n# Geef variabelen een waarde\na = 5\nb = 0\n\n# Deel a door b\ntry:\n    c = a/b\n    print(c)\nexcept: \n    print(\"Er is iets fout gegaan\")\nprint(\"einde bewerking\")    \n\n# Geef variabelen een waarde\na = 5\nb = 1    \n\n# Deel a door b\ntry:\n    c = a/b\n    print(c)\nexcept: \n    print(\"Er is iets fout gegaan\")\nprint(\"einde bewerking\")\n\nBij deze manier van afhandeling zie je niet wat er fout gegaan is. Python heeft ook de mogelijkheid om de opgetreden exceptie op te vangen en te tonen. Hiermee kan je aan de gebruiker aangeven wat er fout gegaan is zodat dat de uitvoering van het programma stopt.\n\n# Geef variabelen een waarde\na = 5\nb = 0\n\n# Deel a door b\ntry:\n    c = a/b\n    print(c)\nexcept Exception as e: \n    print(e)\nprint(\"einde bewerking\")"
  },
  {
    "objectID": "Introductie_Bestandsbeheer_met_Python.html",
    "href": "Introductie_Bestandsbeheer_met_Python.html",
    "title": "4  Introductie Bestandsbeheer met Python",
    "section": "",
    "text": "In dit hoofdstuk wordt de volgende Python module nader uitgelegd: - os (voor bestandsbeheer)\nDeze module heb je later nodig om het proces van het berekenen van een NDVI kaart op basis van Sentinel satellietbeelden te automatiseren.\n\n\nDe module os maakt het mogelijk om vanuit een Python script bestandsbeheer uit te voeren. Denk hierbij aan het navigeren naar een folder, het opvragen van een lijst van bestanden in een folder, het verplaatsen van bestanden en het verwijderen van bestanden. De volledige set van funcies kan je hier vinden. Voordat je functies uit de os module kan gebruiken moet deze geïmporteerd worden.\nLet op: In Python kan je niet de  (forward slash) in de pad aanduiding gebruiken zoals gebruikelijk is in Windows. Er zijn drie alternatieven: - forward slash (/) - Twee backslashes (\\) - Pad beginnen met r\n\nimport os\n\n# Print naam van huidige folder\nfolder = os.getcwd()\nprint(folder)\n\n# Navigeer naar de folder data_files en weer terug\nos.chdir('data_files')\nfolder = os.getcwd()\nprint(folder)\nos.chdir('..')\nfolder = os.getcwd()\nprint(folder)\n\nc:\\git_repositories\\Quatro-Book-TeM\nc:\\git_repositories\\Quatro-Book-TeM\\data_files\nc:\\git_repositories\\Quatro-Book-TeM\n\n\nHet is mogelijk om de inhoud van een folder op te vragen. Je krijgt dan een lijst met alle bestandsnamen en foldernamen van het type list terug. Met een for lus kan je de naam van elk bestand en elke de folder ophalen en vervolgens afdrukken. Met de functie os.path.isfile kan je checken het een bestand of folder is.\n\nimport os\n\n# Toon alle bestanden in deze folder \nos.chdir('data_files')\nfolder_inhoud = os.listdir()\nfor bestand_of_folder in folder_inhoud :\n    \n    # Check of je een folder of bestand hebt. Als je een bestand hebt, print naam en extensie \n    if os.path.isfile(bestand_of_folder) :\n      print(os.path.abspath(bestand_of_folder))     # Volledige pad met bestandsnaam en extensie\n      print(os.path.basename(bestand_of_folder))    # Bestandsnaam met extensie\n      print(os.path.splitext(bestand_of_folder)[0]) # Bestandsnaam zonder extensie\n      print(os.path.splitext(bestand_of_folder)[1]) # Extensie\n      print('')\n\n# Change dir\nos.chdir('..')  \n\n\nc:\\git_repositories\\Quatro-Book-TeM\\data_files\\T31UFT_20190824T105031_B02_10m.tif\nT31UFT_20190824T105031_B02_10m.tif\nT31UFT_20190824T105031_B02_10m\n.tif\n\nc:\\git_repositories\\Quatro-Book-TeM\\data_files\\T31UFT_20190824T105031_B03_10m.tif\nT31UFT_20190824T105031_B03_10m.tif\nT31UFT_20190824T105031_B03_10m\n.tif\n\nc:\\git_repositories\\Quatro-Book-TeM\\data_files\\T31UFT_20190824T105031_B04_10m.tif\nT31UFT_20190824T105031_B04_10m.tif\nT31UFT_20190824T105031_B04_10m\n.tif\n\nc:\\git_repositories\\Quatro-Book-TeM\\data_files\\T31UFT_20190824T105031_B08_10m.tif\nT31UFT_20190824T105031_B08_10m.tif\nT31UFT_20190824T105031_B08_10m\n.tif\n\n\n\nJe kan de lijst van bestanden ook gebruiken om te checken of een bestand aanwezig is in een folder. Dit zou je kunnen gebruiken om een bestand te verwijderen als het gevonden is.\n\nimport os\n\n# Maak lijst van bestanden\nfolder_inhoud = os.listdir()\n\n# Check of bestand bestaat en verwijder indien gevonden\nbestandsnaam = 'my_file.txt'\nif bestandsnaam in folder_inhoud :\n    print('Bestand gevonden')\nelse :\n    print('Bestand niet gevonden')\n\n# Maak leeg bestand\nopen(bestandsnaam, 'a').close()\n\n# Maak lijst van bestanden\nfolder_inhoud = os.listdir()\n\n# Check of bestand bestaat en verwijder indien gevonden\nif bestandsnaam in folder_inhoud :\n    print('Bestand gevonden en verwijderd')\n    os.remove(bestandsnaam)\nelse :\n    print('Bestand niet gevonden')\n\n\nBestand niet gevonden\nBestand gevonden en verwijderd"
  },
  {
    "objectID": "Introductie_GDAL_in_Python.html",
    "href": "Introductie_GDAL_in_Python.html",
    "title": "5  Werken met GDAL in Python",
    "section": "",
    "text": "GDAL is een C/C++ bibliotheek voor het converteren van rasterdata en vectordata bestanden. In Python is het mogelijk deze bibliotheek te gebruiken via zogenaamde Python bindings. Deze bindings vertalen de Python commando’s in C/C++ commando’s zodat het mogelijk wordt GDAL functionaliteit in Python the gebruiken. Om GDAL in Python te kunnen gebruiken moeten zowel de C/C++ bibliotheken als de GDAL Python bindings geïnstalleerd zijn.\n\n# Importeren van module voor toegang tot systeem variabelen en functies\nimport sys\n\n# Importeren van module voor interactie met file system\nimport os \n\n# Importeren van module met mathematische functies\nimport math\n\n# Importeren van module voor plotten van rasterbestanden\nfrom matplotlib import pyplot\n\n# Importeren van module om te werken met arrays\nimport numpy\n\n# Test of GDAL/OGR geïnstalleerd is en toon versie\ntry:\n    from osgeo import gdal\n    from osgeo import gdalnumeric\n    from osgeo import gdalconst\n    from osgeo import ogr\n    from osgeo import osr\n    print('GDAL/OGR installed')\n    print('Versie is ' + str(gdal.VersionInfo('VERSION_NUM')))\nexcept:\n    sys.exit('ERROR: cannot find GDAL/OGR modules')\n    \n# Print huidige folder\nfolder = os.getcwd()\nprint(folder)\n\n# Ga naar folder met databestanden\nos.chdir('data_files')\n\nGDAL/OGR installed\nVersie is 3040300\nc:\\git_repositories\\Quatro-Book-TeM"
  },
  {
    "objectID": "Introductie_GDAL_in_Python.html#ophalen-eigenschappen-van-rasterbestanden",
    "href": "Introductie_GDAL_in_Python.html#ophalen-eigenschappen-van-rasterbestanden",
    "title": "5  Werken met GDAL in Python",
    "section": "5.2 Ophalen eigenschappen van rasterbestanden",
    "text": "5.2 Ophalen eigenschappen van rasterbestanden\nIn een rasterbestand is data in een regelmatig grid opgeslagen. Een raster is opgebouwd uit rastercellen (pixels). Het aantal rastercellen is bepaald door het aantal rijen en kolommen van het raster. Per rastercel worden één of meer attributen opgeslagen. Attributen worden in een rasterbestand in banden opgeslagen.\nMet gdal is het mogelijk om deze informatie uit een rasterbestand te halen.\n\n# Open rasterbestand om aantal rijen en kolommen en banden te bepalen\nraster_bestand_naam = 'T31UFT_20190824T105031_B02_10m.tif' \nraster_bestand = gdal.Open(raster_bestand_naam)\nprint('Aantal kolommen ' + str(raster_bestand.RasterXSize))\nprint('Aantal rijen: ' + str(raster_bestand.RasterYSize))\nprint('Aantal banden: ' + str(raster_bestand.RasterCount))\n\n# Sluit raster bestand\nraster_bestand = None\n\nAantal kolommen 1378\nAantal rijen: 769\nAantal banden: 1\n\n\nVoor het berekenen van geografische coördinaten van een rastercel op basis van het rijnummer en kolomnummer in het raster zijn de volgende parameters nodig: - x-coördinaat linker bovenhoek raster - y-coördinaat linker bovenhoek raster - Breedte van een pixel - Hoogte van een pixel\nVoorwaarde is dat het raster niet gedraaid is ten opzichte van het coördinaatsysteem. Als dit wel het geval is, zal ook met de rotatie van het raster rekening gehouden moeten worden bij de omrekening van rijen en kolommen naar x- en y-coördinaten.\nBovengenoemde eigenschappen van een raster zijn met gdal op te vragen.\n\n# Open rasterbestand\nraster_bestand_naam = 'T31UFT_20190824T105031_B04_10m.tif' \nraster_bestand = gdal.Open(raster_bestand_naam)\n\n# Haal geotransform array op om geometrische eigenschappen rasterbestand op te halen\ngeotransform = raster_bestand.GetGeoTransform()\nx_links_boven = geotransform[0]\ny_links_boven = geotransform[3]\ncel_breedte = geotransform[1]\ncel_hoogte = geotransform[5]\nprint(\"X-coördinaat linker bovenhoek: \" + str(x_links_boven))\nprint(\"Y-coördinaat linker bovenhoek: \" + str(y_links_boven))\nprint(\"Breedte van cel: \" + str(cel_breedte))\nprint(\"Hoogte van cel: \" + str(cel_hoogte))\n\n# Sluit raster bestand\nraster_bestand = None\n\nX-coördinaat linker bovenhoek: 644880.4463\nY-coördinaat linker bovenhoek: 5730020.3039\nBreedte van cel: 9.997851088534178\nHoogte van cel: -10.004335240572352\n\n\nOm het raster op de juiste plaats op de aarde te kunnen plaatsen is het noodzakelijk om te weten in welk coördinaatsysteem de x- en y-coördinaat vastgelegd zijn. Dit wordt bepaald door de projectie van het grid.\nOok dit is op te vragen met gdal.\n\n# Open rasterbestand om aantal rijen en kolommen en banden te bepalen\nraster_bestand_naam = 'T31UFT_20190824T105031_B04_10m.tif' \nraster_bestand = gdal.Open(raster_bestand_naam)\n\n# Opvragen projectie van grid. De projectie wordt afgedrukt in WKT\nprint(raster_bestand.GetProjection())\n\n# Sluit raster bestand\nraster_bestand = None\n\nPROJCS[\"WGS 84 / UTM zone 31N\",GEOGCS[\"WGS 84\",DATUM[\"WGS_1984\",SPHEROID[\"WGS 84\",6378137,298.257223563,AUTHORITY[\"EPSG\",\"7030\"]],AUTHORITY[\"EPSG\",\"6326\"]],PRIMEM[\"Greenwich\",0,AUTHORITY[\"EPSG\",\"8901\"]],UNIT[\"degree\",0.0174532925199433,AUTHORITY[\"EPSG\",\"9122\"]],AUTHORITY[\"EPSG\",\"4326\"]],PROJECTION[\"Transverse_Mercator\"],PARAMETER[\"latitude_of_origin\",0],PARAMETER[\"central_meridian\",3],PARAMETER[\"scale_factor\",0.9996],PARAMETER[\"false_easting\",500000],PARAMETER[\"false_northing\",0],UNIT[\"metre\",1,AUTHORITY[\"EPSG\",\"9001\"]],AXIS[\"Easting\",EAST],AXIS[\"Northing\",NORTH],AUTHORITY[\"EPSG\",\"32631\"]]\n\n\nOm de rasterwaardes te kunnen benaderen moet het raster in een array geladen worden. Een array is een datastructuur te vergelijken met een Excelbestand waarbij elke cel de waarde van een rastercel bevat. De waarde van een rastercel kan uitgelezen worden op basis van de rij en kolom in de array. Om een raster in een array te laden gebruik je zowel de gdal als de gdalnumeric module.\n\n# Open rasterbestand om aantal rijen en kolommen en banden te bepalen\nraster_bestand_naam = 'T31UFT_20190824T105031_B04_10m.tif' \nraster_bestand = gdal.Open(raster_bestand_naam)\n\n# Haal de eerste band op uit raster bestand\nrasterband = raster_bestand.GetRasterBand(1)\n\n# Laad het grid vanuit de rasterband in het array\narray = gdalnumeric.BandReadAsArray(rasterband)\nprint(array)\n\n# Lees waarde uit op basis van rij en kolom. Let op: array begint bij rij 0 en kolom 0\nrij = 137\nkolom = 51\nwaarde = array[(rij-1),(kolom-1)]\nprint('Waarde in grid op rij ' + str(rij) + ' en kolom ' + str(kolom) + ' is ' + str(waarde))\n\n# Sluit raster bestand\nraster_bestand = None\n\n[[ 764  753  732 ...  849 1088 1140]\n [ 728  732  747 ...  626  890 1246]\n [ 722  742  764 ...  326  517  925]\n ...\n [ 363  292  300 ...  267  239  256]\n [ 310  342  310 ...  264  250  250]\n [ 323  344  332 ...  248  233  237]]\nWaarde in grid op rij 137 en kolom 51 is 304\n\n\nIn de praktijk haal je geen waardes op uit een raster op basis van rijen en kolommen maar op basis van x-coördinaat en y-coördinaat. Deze coördinaat moet vertaald worden naar een rijnummer en kolomnummer in het raster. Hiervoor zijn de volgende parameters nodig: - Aantal rijen van raster - Aantal kolommen van raster - x-coördinaat linker bovenhoek raster - y-coördinaat linker bovenhoek raster - Breedte van een pixel - Hoogte van een pixel\nDe berekening kan uitgevoerd worden met de functie get_value_from_grid. Deze functie heeft de naam van rasterbestand, nummer van de band en de x- en y-coördinaat waarvoor je de waarde uit het rasterbestand op wilt halen als input. De functie geeft de waarde in het rastserbestand op de ingegeven coördinaat.\nLet op: Rasterbestand en coördinaten moeten in hetzelfde coördinaatsysteem opgegeven worden.\n\n# Functie om waarde uit raster te halen op basis van x,y\ndef get_value_from_grid (raster_bestandnaam_in, band_in, x_in, y_in):\n\n    # Open rasterbestand\n    raster_bestand_in = gdal.Open(raster_bestandnaam_in)\n    \n    # Haal geotransform array op om geometrische eigenschappen rasterbestand op te halen\n    nr_kolommen = int(raster_bestand_in.RasterXSize)\n    nr_rijen = int(raster_bestand_in.RasterYSize)\n    geotransform = raster_bestand_in.GetGeoTransform()\n    x_links_boven = float(geotransform[0])\n    y_links_boven = float(geotransform[3])\n    cel_breedte = float(geotransform[1])\n    cel_hoogte = float(geotransform[5])\n    \n    # Haal de eerste band op uit raster bestand\n    rasterband = raster_bestand_in.GetRasterBand(1)\n\n    # Laad het grid vanuit de rasterband in het array\n    array = gdalnumeric.BandReadAsArray(rasterband)\n    \n    # Haal rij en kolom op\n    kolom = int((x_in - x_links_boven)/cel_breedte)\n    rij = int((y_in - y_links_boven)/cel_hoogte)\n        \n    # Check of waarde binnen raster valt\n    if kolom > 0 and kolom <= nr_kolommen and rij > 0 and rij <= nr_rijen :\n        waarde_uit = array[(rij-1),(kolom-1)]\n    else :\n        print('Opgegeven coördinaat ligt buiten raster')\n        waarde_uit = None\n      \n    # Sluit raster bestand\n    array = None\n    raster_bestand = None\n    \n    # Geef waarde terug    \n    return waarde_uit \n\nJe roept bovenstaande functie als volgt aan voor het rasterbestand ‘T31UFT_20190824T105031_B04_10m.tif’, band 1 en coördinaat 651500, 5726140. Omdat het coördinaatsysteem van het rasterbestand UTM (zone 31N) is, staan de coördinaten ook in dit coördinaatsysteem.\n\n# Haal waarde op voor rastercel in band 1 in rasterbestand\nraster_bestand_naam = 'T31UFT_20190824T105031_B04_10m.tif' \nx = 651500\ny = 5726140\nband = 1\nwaarde = get_value_from_grid (raster_bestand_naam, band, x, y) \nprint('Waarde op coördinaat(' + str(x) + ', ' + str(y) + ') = ' + str(waarde))  \n\nWaarde op coördinaat(651500, 5726140) = 606"
  },
  {
    "objectID": "Introductie_GDAL_in_Python.html#plotten-van-rasterbestanden",
    "href": "Introductie_GDAL_in_Python.html#plotten-van-rasterbestanden",
    "title": "5  Werken met GDAL in Python",
    "section": "5.3 Plotten van rasterbestanden",
    "text": "5.3 Plotten van rasterbestanden\nVoor het plotten van raster bestanden maken we gebruik van het object pyplot dat we importeren uit de module ’matplotlib. Eerst moeten we de data uit het raster bestand in een array laden. Deze array kan vervolgens geplot worden.\n\n# Open rasterbestand en kopieer data uit band naar array\nraster_bestand_naam = 'T31UFT_20190824T105031_B08_10m.tif' \nraster_bestand = gdal.Open(raster_bestand_naam, gdalconst.GA_ReadOnly)\nrasterband     = raster_bestand.GetRasterBand(1)\narray_band     = gdalnumeric.BandReadAsArray(rasterband)\n\n# Laad array in pyplot en toon plot met colormap pink\npyplot.figure(figsize=(20,10))\npyplot.imshow(array_band, cmap='Reds')\npyplot.show()\n\n\n\n\nOm de verdeling van digital numbers (DN) in het rasterbestand te bekijken, kunnen we een histogram plotten:\n\n# Show histogram\naantal_klassen = 50\npyplot.hist(numpy.ravel(array_band),aantal_klassen);\npyplot.title('Histogram van rasterband')\npyplot.xlabel('DN'); \npyplot.ylabel('Frequentie')\npyplot.show()\n\n# Sluit bestand\nraster_bestand = None"
  },
  {
    "objectID": "Introductie_NDVI.html",
    "href": "Introductie_NDVI.html",
    "title": "6  Berekenen van NDVI in Python",
    "section": "",
    "text": "De Normalized Difference Vegetation Index (NDVI) wordt gebruikt om een inschatting te geven van de gezondheid van de vegetatie op een bepaalde locatie. Voor de NDVI berekening heb je de reflectie in het rood en in het infrarood nodig. Deze spectrale gegevens worden ingewonnen met remote sensingvaak vanuit de ruimte met observatiesatellieten. Voor de Sentinel2 satelliet zijn dit de banden 04 (rood) en 08 (infrarood).\nDe NDVI wordt berekend met de volgende formule uitgaande van de Sentinel2 banden voor rood en infrarood:\nNDVI = (B08 + B04) / (B08 - B04)\nDe NDVI heeft een waarde tussen de +1 en -1. Hoe dichter de NDVI bij +1 ligt, hoe gezonder de vegetatie.\nDe onderstaande functie calculate_ndvi berekent de NDVI. Omdat we hierbij gebruikmaken van GDAL moet ook deze module geïmporteerd worden.\n\n# Importeer noodzakelijke modules\nfrom osgeo import gdal\nfrom osgeo import gdalnumeric\nfrom osgeo import gdalconst\nfrom matplotlib import pyplot\nimport os\nimport numpy\n\n# Function to calculate NDVI rasterimage\ndef calculate_ndvi (rasterfile_red_name, rasterfile_nir_name) :\n    \n    try:\n    \n        # Construct name of NDVI rasterfile\n        rasterfile_ndvi_name = rasterfile_red_name.replace('B04', 'NDVI')\n        \n        # Open Red band en schrijf data naar array\n        rasterfile_red = gdal.Open(rasterfile_red_name, gdalconst.GA_ReadOnly )\n        rasterband_red = rasterfile_red.GetRasterBand(1)\n        array_red      = gdalnumeric.BandReadAsArray(rasterband_red)\n        \n        # Open NIR band en schrijf data naar array\n        rasterfile_nir = gdal.Open(rasterfile_nir_name, gdalconst.GA_ReadOnly )\n        rasterband_nir = rasterfile_nir.GetRasterBand(1)\n        array_nir      = gdalnumeric.BandReadAsArray(rasterband_nir)\n        \n        # Bereken NDVI: Let op: Maak er eerst een array met floats van omdat resultaat een float is\n        array_ndvi = (array_nir.astype(float) - array_red.astype(float))/(array_nir.astype(float) + array_red.astype(float))\n        \n        # Haal driver op voor output GeoTIFF raster bestand \n        driver = gdal.GetDriverByName(\"GTiff\")\n    \n        # Haal aantal rijen en kolommen op voor output raster bestand\n        nr_of_columns = rasterfile_red.RasterXSize\n        nr_of_rows    = rasterfile_red.RasterYSize\n        \n        # Maak leeg raster bestand met datatype float32\n        rasterfile_ndvi = driver.Create(rasterfile_ndvi_name, nr_of_columns, nr_of_rows, 1, gdal.GDT_Float32)\n\n        # Kopieer geotrans en coordinaatsysteem\n        gdalnumeric.CopyDatasetInfo(rasterfile_red, rasterfile_ndvi)\n\n        # Haal band op en schrijf array naar band\n        rasterband_ndvi = rasterfile_ndvi.GetRasterBand(1)\n        gdalnumeric.BandWriteArray(rasterband_ndvi, array_ndvi)\n\n        # Sluiten van bestanden\n        array_red = None\n        rasterfile_red  = None  \n        array_nir = None\n        rasterfile_nir  = None\n        array_ndvi = None\n        rasterfile_ndvi = None\n\n        # Print name\n        print(rasterfile_ndvi_name + ' generated')\n\n        # Return name of NDVI file\n        return rasterfile_ndvi_name\n\n    except Exception as e: \n        \n        try:\n            rasterfile_red = None\n            rasterfile_nir = None\n            rasterfile_ndvi = None\n        except:\n            None\n\n        print('Error function transform_raster_image')\n        print(e)\n\nNu kan de functie calculate_ndvi gebruikt worden om de NDVI te berekenen. De berekende NDVI kaart wordt geplot en er wordt een histogram van de NDVI waardes gemaakt.\n\n# Navigeer naar de \"data\" folder met de satellietbeelden\nos.chdir('data_files')\n\n# Bereken de NDVI\nfile_name_B04 = \"T31UFT_20190824T105031_B04_10m.tif\"\nfile_name_B08 = \"T31UFT_20190824T105031_B08_10m.tif\"\nfile_name_NDVI = calculate_ndvi(file_name_B04, file_name_B08)\nprint('Naam van bestand met berekende NDVI is ' + str(file_name_NDVI))\n\n# Open rasterbestand en kopieer data uit band naar array\nraster_bestand = gdal.Open(file_name_NDVI, gdalconst.GA_ReadOnly)\nrasterband     = raster_bestand.GetRasterBand(1)\narray_band     = gdalnumeric.BandReadAsArray(rasterband)\n\n# Laad array in pyplot en toon plot met colormap pink\npyplot.figure(figsize=(20,10))\npyplot.imshow(array_band, cmap='Reds')\npyplot.show()\n\n# Show histogram\naantal_klassen = 50\npyplot.hist(numpy.ravel(array_band),aantal_klassen)\npyplot.title('Histogram van rasterband')\npyplot.xlabel('DN'); \npyplot.ylabel('Frequentie')\npyplot.show()\n\n# Sluit bestand\nraster_bestand = None"
  }
]